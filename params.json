{
  "name": "SBT-JavaCPP",
  "tagline": "Use JavaCPP and JavaCPP preset libs in your SBT project with ease.",
  "body": "## Why\r\n\r\nBecause you want to use JavaCPP to interface with C++ libs without having to manage platform discovery and native libraries on your own.\r\n\r\n## Usage\r\n\r\nIn your `project/plugins.sbt`:\r\n\r\n```scala\r\naddSbtPlugin(\"org.bytedeco\" % \"sbt-javacpp\" % \"1.4\")\r\n```\r\n\r\nAdding the above line will set up your project's classpath to include `maven-plugins` as well as a add a dependency on\r\nthe core JavaCPP library.\r\n\r\nTo add a dependency on a JavaCPP preset in your project, the following snippet will do that for you, taking care\r\nof adding the proper native preset for your target platform as well:\r\n\r\n```scala\r\n// in build.sbt\r\n\r\njavaCppPresetLibs ++= Seq(\"opencv\" -> \"3.0.0\", \"ffmpeg\" -> \"2.8.1\")\r\n\r\n```\r\n\r\n## Customisation\r\n\r\n### JavaCPP Version\r\n\r\nTo control the version of JavaCPP you want to use:\r\n\r\n```scala\r\njavaCppVersion := \"1.2\"\r\n```\r\n\r\nNote that the JavaCPP presets are tied to specific versions of JavaCPP, so this will update your presets as well. \r\n\r\n### Target Platform\r\n\r\nBy default, this plugin will download the appropriate binaries for the platform of the computer currently\r\nrunning SBT, you can modify this by setting it to another platform (for example, if you want to compile JARs to be run\r\non other platforms)\r\n\r\n```scala\r\njavaCppPlatform := \"android-arm\"\r\n```\r\n\r\nAlternatively, you can set the target platform by passing a System Property: `sbt.javacpp.platform`, which means that\r\nyou can change the target platform for your build straight from your command line.\r\n\r\n```scala\r\nsbt compile -Dsbt.javacpp.platform=\"android-arm android-x86\"\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}